{"componentChunkName":"component---src-templates-blog-post-js","path":"/21/","webpackCompilationHash":"a26b0d7def9a1629a68c","result":{"data":{"site":{"siteMetadata":{"title":"(대충 공부한거 적는다는 제목)","author":"WJNAM"}},"markdownRemark":{"id":"cc54d7dd-0002-5eef-b802-88beabdafae0","excerpt":"BackgroundSpring Boot 버전이 낮은 버전(4.1.x)이라  패키지를 지원하지 않음  위 패키지가 없어 관련 인터페이스가 존재하지 않아 JSR 규격을 사용하는 EhCache 3.x 사용은 힘들다고 판단함EhCache 2.x의 마지막 버전은 2.10.x인데 이건 또 jdk…","html":"<h2>Background</h2>\n<ul>\n<li>Spring Boot 버전이 낮은 버전(4.1.x)이라 <code class=\"language-text\">spring-boot-starter-cache</code> 패키지를 지원하지 않음  </li>\n<li>위 패키지가 없어 관련 인터페이스가 존재하지 않아 JSR 규격을 사용하는 EhCache 3.x 사용은 힘들다고 판단함</li>\n<li>EhCache 2.x의 마지막 버전은 2.10.x인데 이건 또 jdk-1.8을 요구해서 jdk-1.7을 사용하는 환경에서 사용이 불가능…</li>\n<li>EhCahe 2.9.1 버전으로 세팅 성공</li>\n</ul>\n<h2>pom.xml</h2>\n<ul>\n<li>ehcahe는 물론 별도로 ehcache의 인터페이스를 제공해주기 위해 <code class=\"language-text\">spring-context-support</code>도 추가해줘야 한다.  </li>\n<li>java 표준 cache 인터페이스도 추가</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-context-support<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>net.sf.ehcache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>ehcache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>${ehcache.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>javax.cache<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>cache-api<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h2>Configuration</h2>\n<p>CacheManager 빈 등록을 위한 Configuration</p>\n<p><code class=\"language-text\">@EnableCaching</code>을 통해 ehcache 기능을 annotation으로 쉽게 사용하는 것(<code class=\"language-text\">@Cacheable</code>, <code class=\"language-text\">@Caching</code> 등)이 가능해진다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableCaching</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CacheConfig</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">EhCacheManagerFactoryBean</span> <span class=\"token function\">ehCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">EhCacheManagerFactoryBean</span> factoryBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EhCacheManagerFactoryBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfactoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setConfigLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathResource</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/ehcache.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfactoryBean<span class=\"token punctuation\">.</span><span class=\"token function\">setShared</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> factoryBean<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">CacheManager</span> <span class=\"token function\">cacheManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EhCacheManagerFactoryBean</span> ehCache<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">EhCacheCacheManager</span><span class=\"token punctuation\">(</span>ehCache<span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>CacheManager 빈 Test</h2>\n<p>실제 ehcache 사용을 위한 코드는 아니고 CacheManager 빈이 제대로 생성됐는지 확인하기 위한 Component이다.<br>\nSpring boot가 구동될 때 CacheManager의 실제 구현체(위 경우엔 당연히 ehcahe)의 이름을 출력해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CacheManagerCheck</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CommandLineRunner</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CacheManagerCheck</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">CacheManager</span> cacheManager<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CacheManagerCheck</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CacheManager</span> cacheManager<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheManager <span class=\"token operator\">=</span> cacheManager<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> strings<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"=========================================================\\n\"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"Using cache manager: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheManager<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span>\n                <span class=\"token operator\">+</span> <span class=\"token string\">\"=========================================================\\n\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>@Cacheable</h2>\n<p>Annotation을 사용하면 위에서 설정한 CacheManager를 따로 주입해주지 않아도 쉽게 사용할 수 있다.</p>\n<p><code class=\"language-text\">@Cacheable</code> Annotation의 value와 key에 일치하는 cache가 존재한다면 <em>메소드 내부를 호출하지 않고  그냥 cache의 값을 반환</em>해준다.<br>\n(반대로 일치하는 cache가 없다면 메소드 내부를 호출하여 값을 반환한다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Cacheable</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span><span class=\"token string\">\"#id\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getStoredClientId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"****저장된 cache없음****\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dummyQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// DB 호출이 오래걸렸다고 가정하기 위해 2초 sleep</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"testId\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dummyQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2 seconds</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalStateException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(단 <strong>이 버전(4.1.x)</strong>에서는 <code class=\"language-text\">@Cacheable</code> annotation이 붙은 메소드는 다른 class에서 직접 호출할때만 동작한다. 동일한 클래스의 다른 메소드에서 @Cacheable 메소드를 호출해도 동작하지 않는다. 이걸 몰라서 삽질을 오래했다… 4.3.0 부터는 해결됐다고 하는듯? <a href=\"https://brocess.tistory.com/236\">https://brocess.tistory.com/236</a>)</p>","frontmatter":{"title":"EhCache 2.x 적용 Example","date":"January 06, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/21/","previous":{"fields":{"slug":"/18/"},"frontmatter":{"title":"Spring Study - (5)"}},"next":null}}}