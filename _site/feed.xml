<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack Problems</title>
    <description>My Personal Stack Problems</description>
    <link>https://agusmakmun.github.io/</link>
    <atom:link href="https://agusmakmun.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 31 Jul 2016 23:58:10 +0900</pubDate>
    <lastBuildDate>Sun, 31 Jul 2016 23:58:10 +0900</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 31 Jul 2016 23:57:33 +0900</pubDate>
        <link>https://agusmakmun.github.io/jekyll/update/2016/07/31/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">https://agusmakmun.github.io/jekyll/update/2016/07/31/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>get Month Name [CF]</title>
        <description>&lt;p&gt;Map the given integer to a month.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For &lt;code&gt;mo = 1&lt;/code&gt;, the output should be &lt;code&gt;getMonthName(mo) = &quot;Jan&quot;&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;For &lt;code&gt;mo = 0&lt;/code&gt;, the output should be &lt;code&gt;getMonthName(mo) = &quot;invalid month&quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Input/Output&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[time limit] 4000ms (py)&lt;/li&gt;
  &lt;li&gt;[input] integer mo (A non-negative integer).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Constraints:&lt;/strong&gt; &lt;code&gt;0 ≤ mo ≤ 15&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[output] string&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;code&gt;3&lt;/code&gt;-letter abbreviation of month number &lt;code&gt;mo&lt;/code&gt; or &lt;code&gt;&quot;invalid month&quot;&lt;/code&gt; if the month doesn’t exist.&lt;/p&gt;

&lt;p&gt;Here are abbreviations of all months:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python
def getMonthName(mo):
    months = {
        1: &quot;Jan&quot;, 2: &quot;Feb&quot;, 3: &quot;Mar&quot;, 4:&quot;Apr&quot;, 
        5: &quot;May&quot;, 6: &quot;Jun&quot;, 7: &quot;Jul&quot;, 8:&quot;Aug&quot;, 
        9: &quot;Sep&quot;, 10: &quot;Oct&quot;, 11: &quot;Nov&quot;, 12: &quot;Dec&quot;
    }
    if mo in months.keys():
        return months.get(mo)
    return &quot;invalid month&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result Tests&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python
&amp;gt;&amp;gt;&amp;gt; getMonthName(1)
&quot;Jan&quot;
&amp;gt;&amp;gt;&amp;gt; getMonthName(0)
&quot;invalid month&quot;
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Jun 2016 05:43:45 +0900</pubDate>
        <link>https://agusmakmun.github.io/python/codefights/2016/06/11/get-month-name-cf.html</link>
        <guid isPermaLink="true">https://agusmakmun.github.io/python/codefights/2016/06/11/get-month-name-cf.html</guid>
        
        
        <category>python</category>
        
        <category>codefights</category>
        
      </item>
    
      <item>
        <title>Find the number of even digits in the given integer [CF]</title>
        <description>&lt;p&gt;Find the number of even digits in the given integer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For &lt;code&gt;n = 1010&lt;/code&gt;, the output should be &lt;code&gt;numberOfEvenDigits(n) = 2&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;For &lt;code&gt;n = 123&lt;/code&gt;, the output should be &lt;code&gt;numberOfEvenDigits(n) = 1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Input/Output&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[time limit] 4000ms (py)&lt;/li&gt;
  &lt;li&gt;[input] integer n (A positive integer).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Constraints:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1 ≤ n ≤ 106.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;[output] integer&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;My Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python
def numberOfEvenDigits(n):
    return len(filter(lambda m: m.isdigit() and int(m) % 2 == 0, str(n)))
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rests Tests:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```
n: 1010
Output: 2&lt;/p&gt;

&lt;p&gt;n: 123
Output: 1&lt;/p&gt;

&lt;p&gt;n: 135
Output: 0
```&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Jun 2016 05:39:03 +0900</pubDate>
        <link>https://agusmakmun.github.io/python/codefights/2016/06/11/find-the-number-of-even-digits-in-the-given-integer-cf.html</link>
        <guid isPermaLink="true">https://agusmakmun.github.io/python/codefights/2016/06/11/find-the-number-of-even-digits-in-the-given-integer-cf.html</guid>
        
        
        <category>python</category>
        
        <category>codefights</category>
        
      </item>
    
      <item>
        <title>Find Substrings for line Encoding [CF]</title>
        <description>&lt;p&gt;Given a string, return its encoding defined as follows:&lt;/p&gt;

&lt;p&gt;First, the string is divided into the least possible number of disjoint &lt;strong&gt;substrings&lt;/strong&gt; consisting of identical characters
for example, &lt;code&gt;&quot;aabbbc&quot;&lt;/code&gt; is divided into &lt;code&gt;[&quot;aa&quot;, &quot;bbb&quot;, &quot;c&quot;]&lt;/code&gt;
Next, each substring with length greater than one is replaced with a concatenation of its length and the repeating character
for example, substring &lt;code&gt;&quot;bbb&quot;&lt;/code&gt; is replaced by &lt;code&gt;&quot;3b&quot;&lt;/code&gt;
Finally, all the new strings are concatenated together in the same order and a new string is returned.&lt;/p&gt;

&lt;h4 id=&quot;substring&quot;&gt;SUBSTRING&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;substring&lt;/strong&gt; of a string &lt;code&gt;S&lt;/code&gt; is another string &lt;code&gt;S&#39;&lt;/code&gt; that occurs in &lt;code&gt;S&lt;/code&gt;. For example, &lt;code&gt;&quot;Fights&quot;&lt;/code&gt; is a substring of &lt;code&gt;&quot;CodeFights&quot;&lt;/code&gt;, but &lt;code&gt;&quot;CoFi&quot;&lt;/code&gt; isn’t.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;s = &quot;aabbbc&quot;&lt;/code&gt;, the output should be &lt;code&gt;lineEncoding(s) = &quot;2a3bc&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input/Output&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[time limit] 4000ms (py)&lt;/li&gt;
  &lt;li&gt;[input] string s (String consisting of lowercase English letters.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Constraints:&lt;/em&gt; &lt;code&gt;4 ≤ s.length ≤ 15.&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[output] string (Encoded version of s.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python
import re
def lineEncoding(s):
    grub = [ m.group(0) for m in re.finditer(r&quot;(\w)\1*&quot;, s )]
    numb = 0
    out  = []
    for i in grub:
        numb += 1
        if len(i) &amp;gt; 1:
            out.append(grub[numb-1].replace(grub[numb-1], str(len(i))+i[0]))
        else:
            out.append(i)
    return &#39;&#39;.join(out)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Result Tests:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python
&amp;gt;&amp;gt;&amp;gt;
s = &quot;aabbbc&quot;
&amp;gt;&amp;gt;&amp;gt; lineEncoding(s)
&quot;2a3bc&quot;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; s = &quot;abbcabb&quot;
&amp;gt;&amp;gt;&amp;gt; lineEncoding(s)
&quot;a2bca2b&quot;
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; s = &quot;abcd&quot;
&amp;gt;&amp;gt;&amp;gt; lineEncoding(s)
&quot;abcd&quot;
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 11 Jun 2016 05:04:23 +0900</pubDate>
        <link>https://agusmakmun.github.io/python/codefights/2016/06/11/find-substrings-for-line-encoding-cf.html</link>
        <guid isPermaLink="true">https://agusmakmun.github.io/python/codefights/2016/06/11/find-substrings-for-line-encoding-cf.html</guid>
        
        
        <category>python</category>
        
        <category>codefights</category>
        
      </item>
    
      <item>
        <title>CensorThis - Censor the words [CF]</title>
        <description>&lt;p&gt;Author Question: &lt;strong&gt;Argaen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Code Fights Weekly has gained popularity in the past months and is receiving lots of fan letters. Unfortunately, some of the readers use offensive words and the editor wants to keep the magazine family friendly.&lt;/p&gt;

&lt;p&gt;To manage this, you have been asked to implement a censorship algorithm. You will be given the fan letter &lt;code&gt;text&lt;/code&gt; and a list of &lt;code&gt;forbiddenWords&lt;/code&gt;. Your algorithm should replace all occurrences of the forbidden words in the text with sequences of asterisks of the same length.&lt;/p&gt;

&lt;p&gt;Be careful to censor only words, no one want to see &lt;code&gt;&quot;classic&quot;&lt;/code&gt; spelled as &lt;code&gt;&quot;cl***ic&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For text = “The cat does not like the fire” and
forbiddenWords = [“cat”,”fire”], the output should be
`CensorThis(text, forbiddenWords) = “The &lt;strong&gt;* does not like the **&lt;/strong&gt;”.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[input] string text&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Text to censor, composed of mixed case English words separated by a single whitespace character each.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[input] array.string forbiddenWords&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The list of words to censor, all in lowercase.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;[output] string&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The censored text. Its length should be the same as the length of text.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python
def CensorThis(text, forbiddenWords):
  return &#39; &#39;.join([ t.replace(t, &quot;*&quot; * len(t)) if t.lower() in forbiddenWords else t for t in text.split() ])
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
text: &quot;The cat does not like the fire&quot;
forbiddenWords: [&quot;cat&quot;, &quot;fire&quot;]
Expected Output: &quot;The *** does not like the ****&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
text: &quot;The cat does not like the therapy&quot;
forbiddenWords: [&quot;the&quot;,  &quot;like&quot;]
Expected Output: &quot;*** cat does not **** *** therapy&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
text: &quot;Python is the BEST programming language and LOLCODE is the Worst&quot;
forbiddenWords: [&quot;worst&quot;, &quot;best&quot;]
Expected Output: &quot;Python is the **** programming language and LOLCODE is the *****&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test 4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
text: &quot;A bald eagle is a worthy adversary&quot;
forbiddenWords: [&quot;bald&quot;, &quot;a&quot;]
Expected Output: &quot;* **** eagle is * worthy adversary&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test 5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
text: &quot;The MAGIC words are fiz buzz and plaf&quot;
forbiddenWords: []
Expected Output: &quot;The MAGIC words are fiz buzz and plaf&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Test 6&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
text: &quot;The MAGIC words are fiz buzz and plaf&quot;
forbiddenWords: [&quot;fluzz&quot;, &quot;z&quot;, &quot;ping&quot;, &quot;narf&quot;, &quot;tedd&quot;, &quot;troz&quot;, &quot;zort&quot;]
Expected Output: &quot;The MAGIC words are fiz buzz and plaf&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Thanks to &lt;strong&gt;GOD&lt;/strong&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 May 2016 06:17:54 +0900</pubDate>
        <link>https://agusmakmun.github.io/python/codefights/2016/05/22/censorthis-censor-the-words-cf.html</link>
        <guid isPermaLink="true">https://agusmakmun.github.io/python/codefights/2016/05/22/censorthis-censor-the-words-cf.html</guid>
        
        
        <category>python</category>
        
        <category>codefights</category>
        
      </item>
    
      <item>
        <title>notPaired [CF]</title>
        <description>&lt;p&gt;Author Question: &lt;strong&gt;Lepluto&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In Numberland, every integer living there has a soulmate which is the exact same number. To prevent family disasters, the Numberland mayor made sure that there is no more than two of a certain number. However, he clearly forgot to create a pair for one of the numbers, making it very sad and lonely. Given the array representing Numberland’s citizens, your task is to find which number you need to add to the array so that everyone has a pair.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;notPaired([1, 2, 1]) = 2&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;2 is the only number in the sequence that appears once.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;notPaired([1, 3, 5, 7, 9, 7, 5, 3, 1]) = 9&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;9 is the only number in the sequence that appears once.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Input/Output&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;[input] array.integer numberland&lt;/strong&gt;
  1 ≤ numberland.length ≤ 100&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;[output] integer&lt;/strong&gt;
  The final soulmate you need to add to Numberland in order to make everyone happy.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```python
def notPaired(numberland):
  for x in numberland:
    if numberland.count(x) == 1: return x&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;notPaired([1, 3, 5, 7, 9, 7, 5, 3, 1])
9&lt;/p&gt;

      &lt;p&gt;```&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 22 May 2016 06:10:03 +0900</pubDate>
        <link>https://agusmakmun.github.io/python/codefights/2016/05/22/notpaired-cf.html</link>
        <guid isPermaLink="true">https://agusmakmun.github.io/python/codefights/2016/05/22/notpaired-cf.html</guid>
        
        
        <category>python</category>
        
        <category>codefights</category>
        
      </item>
    
      <item>
        <title>Reverse Bit [CF]</title>
        <description>&lt;p&gt;Author Question: &lt;strong&gt;Giappi&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I have an integer number, which I want to reverse by following steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Convert the number into binary string.&lt;/li&gt;
  &lt;li&gt;Reverse binary string.&lt;/li&gt;
  &lt;li&gt;Convert the reversed binary string back to integer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Can you help me write a function to do it ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;x = 234&lt;/code&gt;, the output should be &lt;code&gt;ReverseBit(x) = 87&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;23410 = 111010102 =&amp;gt; 010101112 = 8710&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Input/Output&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;[input] integer x&lt;/strong&gt;
A non-negative integer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;[output] integer&lt;/strong&gt;
x reversed as described above.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```python
def ReverseBit(x):
  x = bin(x).replace(‘0b’, ‘’)
  reverse_text = ‘’
  for l in range(len(x)-1, -1, -1):
      reverse_text = reverse_text + x[l]
  return int(reverse_text, 2)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;blockquote&gt;
      &lt;p&gt;ReverseBit(234)
87&lt;/p&gt;

      &lt;p&gt;```&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 22 May 2016 06:04:23 +0900</pubDate>
        <link>https://agusmakmun.github.io/python/codefights/2016/05/22/reverse-bit-cf.html</link>
        <guid isPermaLink="true">https://agusmakmun.github.io/python/codefights/2016/05/22/reverse-bit-cf.html</guid>
        
        
        <category>python</category>
        
        <category>codefights</category>
        
      </item>
    
      <item>
        <title>Python Simple Ciphertext</title>
        <description>&lt;p&gt;Simply how to make a ciphertext only with 1 line. in this sample, the plaintext is result encoded from hexa. and then, just changing all integer &lt;code&gt;3&lt;/code&gt; to &lt;code&gt;6&lt;/code&gt; and also otherwise from &lt;code&gt;6&lt;/code&gt; to &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python
&amp;gt;&amp;gt;&amp;gt; #hex_encode = &#39;summonagus&#39;.encode(&#39;hex&#39;)
&amp;gt;&amp;gt;&amp;gt; hex_encode = &#39;73756d6d6f6e61677573&#39;
&amp;gt;&amp;gt;&amp;gt; chip  = &#39;&#39;.join([ str(int(a)*2) if a.isdigit() and int(a) == 3 else str(int(a)/2) if a.isdigit() and int(a) == 6 else a for a in hex_encode ])
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; hex_encode
&#39;73756d6d6f6e61677573&#39;
&amp;gt;&amp;gt;&amp;gt; chip
&#39;76753d3d3f3e31377576&#39;
&amp;gt;&amp;gt;&amp;gt; 
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 21 May 2016 16:32:04 +0900</pubDate>
        <link>https://agusmakmun.github.io/python/security/2016/05/21/python-simple-ciphertext.html</link>
        <guid isPermaLink="true">https://agusmakmun.github.io/python/security/2016/05/21/python-simple-ciphertext.html</guid>
        
        
        <category>python</category>
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>Python Crazy Decrypter has been Released</title>
        <description>&lt;p&gt;Hello gays, this night i want to share my Python Crazy Decrypter tool. Python Crazy Decrypter is real crazy tool to decrypt md5, sha1, sha224, sha256, sha384, and sha512 with Brute Force method. Like most hashes Decrypter we know used the database to check the hash is valid or not.&lt;/p&gt;

&lt;p&gt;This Python Crazy Decrypter tool use the brute force method with complete charachters or with custom charachters choices, and with Hash Type Checker. But, of course it will spend a long time if the result of hash have a very long length, coz this use the brute force method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$ crazy_decrypter -a 2f2ec1296695a9fb3251bbc94a2e0cef -c ichp 4 4
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Proccess&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;```
   &lt;em&gt;** Please drink your coffee first! **&lt;/em&gt;
    Python Crazy Decrypter 0.0.4&lt;/p&gt;

&lt;p&gt;CTRL+C to Exit!
Charachters to try : ichp
Min-length         : 3
Max-length         : 4
Type Decrypt found : md5
Trying with        : iipc - 373fa60ea77f4695bc05fbc1b49d40e3
```&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Result&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Decrypt found : chip
Type Decrypt  : md5
End time      : 06:53:06
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For more you can checkout on our repository: &lt;a href=&quot;https://github.com/agusmakmun/Crazy-Decrypter&quot;&gt;https://github.com/agusmakmun/Crazy-Decrypter&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 21 May 2016 16:25:20 +0900</pubDate>
        <link>https://agusmakmun.github.io/python/security/2016/05/21/python-crazy-decrypter-has-been-released.html</link>
        <guid isPermaLink="true">https://agusmakmun.github.io/python/security/2016/05/21/python-crazy-decrypter-has-been-released.html</guid>
        
        
        <category>python</category>
        
        <category>security</category>
        
      </item>
    
      <item>
        <title>Javascript Validator for Input Number</title>
        <description>&lt;p&gt;This javascript will validate/allow the number only when event key is pressed.
For example result of it:&lt;/p&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;350&quot; src=&quot;//jsfiddle.net/agaust/3qz105nn/embedded/html,result/dark/&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;tutorial above, when you can not directly add the attribute inside html tag.
but if you can add it, you can following this tutorial bellow:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id_price&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;number&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;min=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onkeypress=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;return isNumber(event)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;charCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;which&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;evt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;keyCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;charCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;charCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Refference:&lt;/strong&gt; &lt;a href=&quot;http://stackoverflow.com/a/7295864&quot;&gt;http://stackoverflow.com/a/7295864&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;hope it usefull.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Apr 2016 06:19:22 +0900</pubDate>
        <link>https://agusmakmun.github.io/others/2016/04/26/javascript-validator-for-input-number.html</link>
        <guid isPermaLink="true">https://agusmakmun.github.io/others/2016/04/26/javascript-validator-for-input-number.html</guid>
        
        
        <category>others</category>
        
      </item>
    
  </channel>
</rss>
