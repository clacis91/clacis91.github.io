{"componentChunkName":"component---src-templates-blog-post-js","path":"/17/","webpackCompilationHash":"d000e80decd9237284ce","result":{"data":{"site":{"siteMetadata":{"title":"(대충 공부한거 적는다는 제목)","author":"WJNAM"}},"markdownRemark":{"id":"ac5fc916-ec36-509a-9eb2-7ab8a294c82c","excerpt":"Reference 읽기 좋은 코드가 좋은 코드다 유지보수하기 어렵게 코딩하는 방법 Clean Code 과거의 내가 짠 코드를 보고 민망해봐야.. 나쁜 코드를 짜두면 나중에 유지보수의 cost가 더 높아짐 깨진 유리창 효과 잘못된 코드를 발견하면 고치는건 발견한 사람의 책임이다 Clean…","html":"<h1>Reference</h1>\n<p><a href=\"http://www.hanbit.co.kr/store/books/look.php?p_code=B3602722207\">읽기 좋은 코드가 좋은 코드다</a></p>\n<p><a href=\"http://cfile9.uf.tistory.com/attach/175A3A4850DAB8AC12CCB7\">유지보수하기 어렵게 코딩하는 방법</a></p>\n<hr>\n<h1>Clean Code</h1>\n<ul>\n<li>과거의 내가 짠 코드를 보고 민망해봐야..</li>\n<li>나쁜 코드를 짜두면 나중에 유지보수의 cost가 더 높아짐</li>\n<li>\n<p>깨진 유리창 효과</p>\n<ul>\n<li>잘못된 코드를 발견하면 고치는건 발견한 사람의 책임이다</li>\n</ul>\n</li>\n<li>Clean 코드는 잘 쓴 문장처럼 술술 읽혀야한다</li>\n</ul>\n<h2>Rule</h2>\n<p>대부분은 작명과 관련된 내용</p>\n<h3>Naming Rule</h3>\n<ul>\n<li>Data, Info 등 너무 general한 변수명을 만들지 말고 좀더 명확한</li>\n<li>변수는 꼭 명사로, 메소드는 동사로</li>\n<li>카멜코드 말고 _ 쓰는 틀…없제?</li>\n<li>쓸데없이 주석 달지 말고 변수명만 봐도 잘 이해되게 지어라 (변수명 길어지는걸 무서워하지 말고)</li>\n<li>DB는 약어로 되어 있어도 코드에서는 괜한 약어 쓰지마라</li>\n<li>DeviceList (x), Devices (o)</li>\n<li>tmp/sum/num - 조심</li>\n<li>\n<p>측정치 - 특히 time 같은거 단위 좀 써줘라 (30)이 30sec인지 30ms인지 누가 아냐</p>\n<ul>\n<li>startTime (x) startMilliSec (o)</li>\n</ul>\n</li>\n<li>\n<p>일관성 있는 어휘 사용</p>\n<ul>\n<li>같은 단어도 retrieve / get / select 등 여러 용어로 쓸 수 있는데, 일관되게 써야된다</li>\n<li>send -> deliver, announce, distribut, broadcast… 동사를 좀더 명확하게 써달라는거</li>\n</ul>\n</li>\n<li>for 문에서도 i, j 쓰지말고 무슨 index인지 변수명으로 표현해달라</li>\n<li>멤버변수 앞에 m을 붙인다거나, static 변수 앞에 s를 붙이는거 하지마라 (틀..)</li>\n<li>\n<p>condition은 최대한 긍정의 의미로 사용해라</p>\n<ul>\n<li>‘~하지 않으면 ~해라’ (x) ‘~하면 ~해라’ (o)</li>\n</ul>\n</li>\n</ul>\n<h3>Method</h3>\n<ul>\n<li>\n<p>역할을 잘 표현해야한다</p>\n<ul>\n<li>generateId면 ID만 생성하고 말아야지, 어디다 저장하고 그런 동작이 들어가면 generateIdAndStore임</li>\n</ul>\n</li>\n<li>\n<p>return 은 가능하면 앞에서 빨리</p>\n<ul>\n<li>parameter validation 체크 같은거 해서 그냥 위에서 리턴해버려라</li>\n</ul>\n</li>\n<li>삼항연산자 자제 (쓸거면 진짜 간단한거에만 써라)</li>\n<li>\n<p>조건문에서 변수가 앞으로 오게 해라</p>\n<ul>\n<li>“KIM”.equals(name) vs name.equals(“KIM”)</li>\n<li>앞에꺼는 NullPointerException이 x, 뒤어꺼는 NullPointerException이 o</li>\n<li>그래도 뒤에꺼로 하고 Exception check를 해라</li>\n</ul>\n</li>\n<li>조건문 안에서 다른 메소드 호출하지 마라</li>\n<li>isDone, 이런 식으로 조건 flag 쓰는거 지양하고 그냥 continue, break를 써라</li>\n<li>\n<p>람다 써라</p>\n<ul>\n<li>가독성이 높아짐</li>\n<li>익숙치 않아도 람다좀 써봐라</li>\n</ul>\n</li>\n<li>logger Debugging 레벨 체크하고 쓰면 성능 많이 높아짐</li>\n</ul>\n<h3>주석</h3>\n<blockquote>\n<p>주석 달 시간에 코드 고쳐라</p>\n</blockquote>\n<ul>\n<li>\n<p>정규식에는 주석 달아라</p>\n<ul>\n<li>주석 없으면 정규식 직접 해석하라는 소리임</li>\n</ul>\n</li>\n<li>compareTo 정도는 달아주자, 뭐가 -1이고 뭐가 1인지</li>\n<li>\n<p>depth가 깊어졌을 때 </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token punctuation\">}</span> <span class=\"token comment\">// end of while </span></code></pre></div>\n<p>이 정도 주석은 excuse</p>\n</li>\n<li>”// 나중에 여기 수정!!!!!!!!!!!”  &#x3C;- 이런거 하지마</li>\n<li>sysout &#x3C;- never</li>\n<li>이력 관리 주석 - 이거 하지마, Commit 메시지를 봐라</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**\n * since : 2014. xxx\n * author : xx\n */</span></code></pre></div>\n<ul>\n<li>\n<p>주석 처리된 코드</p>\n<ul>\n<li>히스토리를 모르는 사람이 보니 뭔가 의미가 있어보인다…</li>\n<li>그냥 지워버려라</li>\n</ul>\n</li>\n<li>RFC spec 정도로 코드로 설명이 안될 내용을 표현해줄거 아니면 주석 쓰지 마라</li>\n</ul>\n<h2>표준</h2>\n<blockquote>\n<p>위 내용 모두 자신의 프로젝트의 표준에 반하는 내용이 있다면 다 무시해라</p>\n</blockquote>\n<p>프로젝트 표준 >>>>> 일반적인 Coding Convention Rule >>>>> 개인취향</p>\n<hr>\n<h1>Refactoring</h1>\n<blockquote>\n<p>앞에서 못했으면 나중에라도..</p>\n</blockquote>\n<p>리팩토링은 고도화가 아니다. 기능도 성능도 바뀌는게 아니다.  </p>\n<ul>\n<li>맨날 틀리는걸 또 틀리면 리팩토링을 진지하게 고민</li>\n<li>안보이던 버그가 보이기도 함</li>\n<li>코드 리뷰를 하면 좋음</li>\n</ul>\n<hr>\n<h1>Misc.</h1>\n<ul>\n<li>\n<p>Exception 은 자기가 만들어서 써라</p>\n<ul>\n<li>RuntimeException 이런 상위 Exception 던지지 마라</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Clean-code와 Refactoring","date":"September 05, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/17/","previous":{"fields":{"slug":"/16/"},"frontmatter":{"title":"Spring Study - (4)"}},"next":null}}}