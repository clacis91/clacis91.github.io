{"componentChunkName":"component---src-templates-blog-post-js","path":"/1/","webpackCompilationHash":"d000e80decd9237284ce","result":{"data":{"site":{"siteMetadata":{"title":"(대충 공부한거 적는다는 제목)","author":"WJNAM"}},"markdownRemark":{"id":"079bc352-881d-5217-bcd4-cd6c86330a43","excerpt":"시작 요 몇달간 프레임워크니 API니 하면서 메달리고 있는 와중에 순수 자바만 사용하는 객체지향 좀 더 이해하기 - 블랙잭 게임 구현 (…","html":"<h2>시작</h2>\n<p>요 몇달간 프레임워크니 API니 하면서 메달리고 있는 와중에 순수 자바만 사용하는 <a href=\"https://jojoldu.tistory.com/62\">객체지향 좀 더 이해하기 - 블랙잭 게임 구현 (1)</a> 을 인상깊게 읽고 따라해봤다. 따라하다보니 내 스스로 설계하고 구현해보는 것도 재밌겠다 싶어서 주제를 선정하고 시작해봤다. </p>\n<p>당장 급한건 스프링 관련 훈련이긴 하지만 원래 해야되는 일 말고 다른게 더 재밌는 법. (요즘 같이 시간이 남아도는 시기가 언제 또 올까 싶기도 하고..)</p>\n<h2>주제</h2>\n<p>롤 밴픽 시스템을 객체지향적으로 생각해보자. (롤을 만드는건 너무 어렵다)<br>\nUI는 당연히 콘솔…<br>\nTDD까지 적용해볼까도 했지만 오바인거 같다.</p>\n<h3>규칙</h3>\n<ul>\n<li>3vs3</li>\n<li>챔피언은 총 20개</li>\n<li>밴 카드는 팀당 3장씩, 블라인드 픽, 양팀 중복밴 허용</li>\n<li>픽은 블루팀부터 1 - 2 - 2 - 1 순서로 공개픽</li>\n<li>밴, 픽 시에 랜덤 선택 가능</li>\n<li>퍼플팀은 AI지만 알아서 밴도 하고 픽도 한다</li>\n<li>생각날때마다 추가 (내맘)</li>\n</ul>\n<h3>설계원칙</h3>\n<p><b>(위에서 참고한 블로그에서 그대로 인용)</b></p>\n<ul>\n<li>\n<p>클래스 우선이 아닌, 객체의 속성과 행위가 우선이다.</p>\n<ul>\n<li>클래스는 객체를 추상화하는 도구일 뿐이다.</li>\n</ul>\n</li>\n<li>\n<p>데이터가 아닌 메세지(행위)를 중심으로 객체를 설계해라.</p>\n<ul>\n<li>객체는 혼자 있을 수 없다. 다른 객체와의 협력 안에서만 존재할 수 있다.</li>\n<li>메세지를 중심으로, 해당 메세지가 어떤 객체를 필요로 하는지를 생각하자.</li>\n</ul>\n</li>\n<li>\n<p>하나하나 지시하지 말고 요청해라.</p>\n<ul>\n<li>예를들어, 판사가 증인에게 1) 목격했던 장면을 떠올리고, 2) 떠오르는 시간을 순서대로 구성하고, 3) 말로 간결하게 표현해라 라고 요청하지 않는다. 그냥 “증언하라” 라고 요청한다.</li>\n<li>마찬가지로 객체의 설계단계에서도 책임이 있는 객체에 요청만 하도록 설계한다.</li>\n</ul>\n</li>\n<li>\n<p>하나의 메소드는 하나의 일만 해야한다.</p>\n<ul>\n<li>처음부터 완벽한 설계는 없다.</li>\n<li>설계를 코드로 구현해가는 과정에서 수정이 필요하다면 설계를 수정한다.</li>\n</ul>\n</li>\n</ul>\n<h3>주요 객체</h3>\n<ul>\n<li>유저</li>\n<li>챔피언</li>\n<li>챔피언 풀</li>\n<li>맵</li>\n<li>방 (현재 게임)</li>\n</ul>\n<h3>주요 객체들의 속성과 역할</h3>\n<ul>\n<li>\n<p>유저</p>\n<ul>\n<li>챔피언 하나를 선택해 밴할 수 있다.</li>\n<li>밴 되지 않은 챔피언 중 하나를 픽할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>챔피언</p>\n<ul>\n<li>챔피언마다 이름을 가지고 있다</li>\n<li>현재 선택 가능한 상태인지에 대한 정보를 갖고 있다.</li>\n</ul>\n</li>\n<li>\n<p>챔피언 풀</p>\n<ul>\n<li>20개의 챔피언을 갖고 있다</li>\n<li>요청 시 랜덤 챔피언 하나를 뽑아준다</li>\n</ul>\n</li>\n<li>\n<p>맵</p>\n<ul>\n<li>몇대몇</li>\n<li>일단은 3vs3맵만 만들거지만, 다른맵도 있다고 가정하고 구현</li>\n</ul>\n</li>\n<li>\n<p>방 (게임)</p>\n<ul>\n<li>맵 정보</li>\n<li>방에 참여한 유저</li>\n<li>페이즈 (phase) - 밴 중인지 픽 중인지</li>\n<li>밴 리스트</li>\n<li>픽 리스트</li>\n</ul>\n</li>\n</ul>\n<h2>추상화</h2>\n<p>레퍼런스를 따라한다고 추상화라고 써놓긴 했지만 추상화라기엔 민망하다.<br>\n그냥 최초 구상이라고 하는게 맞을듯</p>\n<h3>유저</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> summonerId<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//private ? ban;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> pick<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> turn<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">selectChampion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">receiveTurn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>User 클래스. 일단 ID와 픽한 챔피언 정보를 갖고 있는건 당연한데, <em>밴한 챔피언 정보를 계속 들고 있어야 하는지</em>는 고민이 필요해보인다. 픽한 챔 정보는 이름만 들고 있을지, 챔피언 객체 그 자체를 들고 있을지는 고민되지만 일단은 이름만 들고 있는거로.<br>\n처음에는 픽과 밴을 수행하는 메소드를 따로따로 생각했는데 사실 유저 입장에서 픽하는 과정과 밴하는 과정은 다르지 않다. 픽,밴 phase만 다를뿐 챔피언을 선택한다는 동작 자체는 동일하기 때문에 메소드도 일단은 하나로.</p>\n<p>turn은 현재 이 유저의 선택 차례인지를 표시해준다. 이게 User 객체에서 필요한 정보인지, 아니면 Room에서만 관리하면 될지에 대한 고민은 있다.<br>\n(receiveTurn 이라는 메소드에서는 선택 차례가 되는 동작을 표현하고 싶은데 getTurn 이라고 하려니 Getter 같은 느낌이 든다. Token?은 갑자기 쌩뚱맞은 개념이 튀어나오는 느낌이 든다. 일단 보류)</p>\n<h3>챔피언</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Champion</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> available<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>챔피언 이름과 픽 가능한지에 대한 정보를 갖고 있다. 밴당했거나, 다른 유저가 선택했으면 픽이 불가능하다.<br>\n플레이 단계까지 가면 정보가 훨씬 많이 필요하겠지만 밴픽 단계에서는 일단 이 정도만 필요해 보인다.</p>\n<h3>챔피언 풀</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ChampionPool</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Champion</span><span class=\"token punctuation\">></span></span> champions<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showChampions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Champion</span> <span class=\"token function\">randomSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>챔피언 목록과 그 목록을 출력해주는 메소드, 목록 내 랜덤 챔을 골라주는 메소드가 제공된다.<br>\n당연히 출력할때 밴 당한 애들은 안보여준다. 바둑판식으로 출력할까 생각중이다.</p>\n<h3>맵</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LolMap</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> summonerCnt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>맵 이름, 몇대몇인지 같은 맵 정보 클래스. 맵 객체는 처음 생성할때 데이터가 모두 주어지고 이후엔 건드릴 일이 없을듯 하다.</p>\n<h3>방</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Room</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LolMap</span> map<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ChampionPool</span> championPool<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Champion</span><span class=\"token punctuation\">></span></span> banList<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Champion</span><span class=\"token punctuation\">></span></span> pickList<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//private Set&lt;Champion> pickSet;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>일단 이름이 Room이긴 한데 GameManager라는 더 거창한 이름을 붙여줘야 될거 같은 느낌이다.<br>\n맵정보, 유저 정보, 챔피언 리스트, 밴 리스트 등 이번 게임과 관련된 모든 정보를 들고 있다. 만들어놓고 나니 너무 역할이 큰거같다. 얘를 어떻게 관리할지가 이번 공부의 핵심이 될거같다.<br>\n픽 정보는 단순히 어느 챔피언이 픽됐는지만 들고 있을지, 아니면 어떤 유저가 어떤 챔피언을 선택했는지까지 들고 있을지 고민중.</p>\n<hr>\n<p>여기까지 하고 보니 상속이고 인터페이스고 너무 없어서 User쪽을 다음 같은 형태로 수정하기로 했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Summoner</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">selectChampion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Ai</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Summoner</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Summoner</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ai와 User는 Summoner 인터페이스의 구현체이며 챔피언 선택을 위한 메소드를 구현해야한다.<br>\nselectChampion() 메소드 내에서 User에서는 ChampionPool에서 선택 가능한 목록을 보고 그 중 플레이할 챔피언을 선택하는 동작이 구현될 것이고, Ai는 어차피 랜덤 선택이기 때문에 ChampionPool 객체에 랜덤 챔피언을 요청하고 선택하는 동작이 한번에 구현될 것이다.</p>","frontmatter":{"title":"객체지향 생각해보기 - 밴픽 (1)","date":"August 02, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/1/","previous":{"fields":{"slug":"/java-study-2/"},"frontmatter":{"title":"Java Study (2)"}},"next":{"fields":{"slug":"/2/"},"frontmatter":{"title":"Java 디자인 패턴 Study - (1)"}}}}}