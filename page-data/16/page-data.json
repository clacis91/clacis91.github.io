{"componentChunkName":"component---src-templates-blog-post-js","path":"/16/","webpackCompilationHash":"d000e80decd9237284ce","result":{"data":{"site":{"siteMetadata":{"title":"(대충 공부한거 적는다는 제목)","author":"WJNAM"}},"markdownRemark":{"id":"5e35b3bf-cf58-589a-989f-c8c2e86b88f2","excerpt":"Reference Book : 토비의 스프링 3.1, 이일민, 에이콘 출판사 Spring Study - (3) 예외 자바에서 Exception은 다루기 귀찮지만 중요한 기능이다. 그냥 출력하고 넘어가는 방법도 있고, 위로 throw…","html":"<p>Reference Book : <a href=\"http://acornpub.co.kr/book/toby-spring3-1-vol2\">토비의 스프링 3.1</a>, 이일민, 에이콘 출판사</p>\n<p><a href=\"../15\">Spring Study - (3)</a></p>\n<hr>\n<h1>예외</h1>\n<p>자바에서 Exception은 다루기 귀찮지만 중요한 기능이다.<br>\n그냥 출력하고 넘어가는 방법도 있고, 위로 throw만 하는 방법도 있는데 무책임한 방법이다. </p>\n<h3>예외의 종류</h3>\n<p>명시적인 처리가 가능한 예외</p>\n<ul>\n<li>Error : 시스템적으로 비정상적인 상황에 발생(out of memory, thread death 등)</li>\n<li>\n<p>Exception : </p>\n<ul>\n<li>Checked Exception : 해당 Exception이 발생하면 반드시 catch하거나 throw 해야함</li>\n<li>Unchecked Exception : RuntimeException이 이 경우인데, 꼭 catch할 필요가 없음</li>\n</ul>\n</li>\n</ul>\n<h3>예외처리 방법</h3>\n<ul>\n<li>예외 복구 : try-catch</li>\n<li>예외처리 회피 : throws</li>\n<li>\n<p>예외 전환</p>\n<ul>\n<li>발생한 예외를 그대로 throw 해줄 경우 의미가 불분명해지는 경우</li>\n<li>Checked Exception을 RuntimeException으로 포장(wrap)해서 넘겨주기</li>\n</ul>\n</li>\n</ul>\n<h3>예외처리 전략</h3>\n<ul>\n<li>\n<p>런타임 예외</p>\n<ul>\n<li>throws Exception으로 점철된 의미없는 메소드들이 많아지면서 예외처리가 너무 번거로워짐</li>\n<li>RuntimeException으로 만들어서 넘겨주도록 처리</li>\n</ul>\n</li>\n<li>\n<p>어플리케이션 예외</p>\n<ul>\n<li>시스템이나 외부의 예외상황이 아니라 어플리케이션 로직에서 발생시키는 예외</li>\n<li>try-catch로 꼭 예외 상황을 처리해줘야 한다</li>\n</ul>\n</li>\n</ul>\n<h3>UserDAO의 예외처리</h3>\n<p>UserDAO에서 JdbcTemplate을 적용하기 이전에는 DB 쿼리를 실행하는 메소드에서 SQLException을 던져줘야 했다. 하지만 JdbcTemplate을 적용하면서 예외처리가 전부 사라졌다. SQLException은 어디로 갔을까?</p>\n<p>JdbcTemplate의 메소드들은 DB 관련 에러를 런타임 에러인 DataAccessException으로 전환하여 던져주고 있어서 사용측에서 처리 의무가 없도록 해준다. </p>\n<h3>Java 표준 Persistence의 예외처리</h3>\n<ul>\n<li>JDBC, JPA, 하이버네이트 등 Data Access 기술에서 Exception을 어떻게 다루는지에 대한 설명</li>\n<li><U>이 부분은 나중에 다시 읽어봐야할듯</U></li>\n</ul>\n<h2>기술에 독립적인 UserDAO 만들기</h2>\n<p>지금까지 만든 UserDAO 클래스를 인터페이스와 구현으로 나눠보자. 구현체는 JDBC를 이용할 수도 있고, JPA나 하이버네이트를 이용할 수도 있다. 인터페이스는 DAO의 기능을 사용하려는 클라이언트들이 필요한 것만 추출하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserDAO</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">User</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">deleteAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserDAOJdbc</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDAO</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>userDao<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>tobi.user.dao.UserDAOJdbc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>동일한 Key를 가진 오브젝트를 등록시켜서 예외를 발생시키는 테스트 코드를 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span><span class=\"token punctuation\">(</span>expected<span class=\"token operator\">=</span><span class=\"token class-name\">DataAccessException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">duplicateKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdao<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tdao<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdao<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>DataAccessException이 발생하기 때문에 테스트가 통과된다. 하지만 이 Exception은 JDBC에서만 발생하기 때문에 이 테스트를 범용적으로 사용할 수는 없다. (예를 들어, 하이버네이트는 같은 상황에서 ConstaintViolationException을 발생시킴)<br>\n만약 DAO에서 사용하는 기술에 상관없이 동일한 예외를 얻고 싶다면, 스프링의 예외 전환 클래스(SQLExceptionTranslator)를 사용해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sqlExceptionTranslate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdao<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\tdao<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdao<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DuplicateKeyException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">SQLException</span> sqlEx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">)</span> ex<span class=\"token punctuation\">.</span><span class=\"token function\">getRootCause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">SQLExceptionTranslator</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SQLErrorCodeSQLExceptionTranslator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> sqlEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token function\">instanceOf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DuplicateKeyException</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1>서비스 추상화</h1>\n<p>시대가 지나고 환경과 상황에 따라 기술이 바뀌고, 그에 따라 다른 API를 사용하고, 다른 스타일의 접근 방법을 사용하고.. 머리가 아프다. 스프링을 통해 어떻게 여러 종류의 기술을 추상화하고 일관된 방법으로 사용할 수 있도록 지원하는지 배워본다.</p>\n<h2>UserDAO 비즈니스 로직</h2>\n<p>기존의 UserDAO에는 간단한 CRUD 기능만 있었다. 여기에 간단한 비즈니스 로직을 추가해보자.</p>\n<blockquote>\n<ol>\n<li>사용자 레벨 추가 (BASIC, SILVER, GOLD)</li>\n<li>첫 가입시 BASIC 레벨, 이후 활동에 따라 업그레이드 된다</li>\n<li>50회 이상 로그인 시 SILVER</li>\n<li>SILVER 레벨에서 30회 이상 추천 받으면 GOLD</li>\n<li>레벨 변경은 조건이 충족돼도 즉시 일어나는 것이 아니라, 일정한 주기를 가지고 일괄적으로 처리</li>\n</ol>\n</blockquote>\n<h3>필드 추가</h3>\n<ul>\n<li>Level enum</li>\n</ul>\n<p>회원 등급에 대한 정보부터 시작해보자. DB에 varchar로 “GOLD”, “SILVER” 이렇게 넣는 방법도 있겠지만 굳이? 각 레벨을 코드화해서 숫자로 관리하면 보다 쉽고 가볍게 관리가 가능하다. 그렇다고 DAO에 사용될 프로퍼티도 숫자로 표현하면? 다루기 쉽기야 하겠지만 타입이 안전하지 않다는 단점이 있다. (잘못된 값 입력 등)</p>\n<p>이런 경우엔 보통 enum을 쓴다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Level</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">BASIC</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">SILVER</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">GOLD</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token class-name\">Level</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Level</span> <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> BASIC<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> SILVER<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">3</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> GOLD<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">default</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown error : \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이러면 DB에 저장할 int 타입의 값을 갖고 있으면서도, setLevel(1000) 같은 잘못된 메소드 사용이 불가능(1000은 Level type이 아니기 때문)해지기 때문에 안전하다.</p>\n<ul>\n<li>User 필드 내용 추가</li>\n</ul>\n<p>User 필드에 방금 생성한 Level 변수를 추가한다. 로그인 횟수와 추천 횟수를 표현할 login, recommend 변수(int)도 추가한다. DB의 User 테이블도 업데이트 하고, DAO, Test코드 등에 새로운 멤버와 관련된 내용을 모두 반영한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> password<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>level <span class=\"token operator\">=</span> <span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>BASIC<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>login <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>recommend <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Spring Study - (4)","date":"September 05, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/16/","previous":{"fields":{"slug":"/15/"},"frontmatter":{"title":"Spring Study - (3)"}},"next":{"fields":{"slug":"/17/"},"frontmatter":{"title":"Clean-code와 Refactoring"}}}}}