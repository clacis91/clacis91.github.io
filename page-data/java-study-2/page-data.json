{"componentChunkName":"component---src-templates-blog-post-js","path":"/java-study-2/","webpackCompilationHash":"9138d7106ff15a387c3b","result":{"data":{"site":{"siteMetadata":{"title":"기록","author":"WJNAM"}},"markdownRemark":{"id":"9a95c3b9-2f4f-567e-8192-68b95f44d9a8","excerpt":"Reference Book : 자바를 다루는 기술 (2014), 김병부, 길벗Object OrientedTBWCollectionTBWExceptionTBWGeneric클래스 내부에서 사용할 타입을 외부에서 지정하는 기법ArrayList<String> strList = new…","html":"<p>Reference Book : <a href=\"https://www.gilbut.co.kr/book/view?bookcode=BN000854\">자바를 다루는 기술 (2014)</a>, 김병부, 길벗</p>\n<hr>\n<h2>Object Oriented</h2>\n<p>TBW</p>\n<h2>Collection</h2>\n<p>TBW</p>\n<h2>Exception</h2>\n<p>TBW</p>\n<h2>Generic</h2>\n<blockquote>\n<p>클래스 내부에서 사용할 타입을 외부에서 지정하는 기법</p>\n</blockquote>\n<p>ArrayList&#x3C;<b>String</b>> strList = new ArrayList&#x3C;<b>String</b>>();\nArrayList&#x3C;<b>Integer</b>> intList = new ArrayList&#x3C;<b>Integer</b>>();</p>\n<p>이런식으로 ArrayList <em>내부에서 쓰일 타입을 외부에서 지정</em>해주는 개념<br>\n<b>제네릭이 없었다면?</b> - StringArrayList, IntegerArrayList와 같이 타입마다 구현이 필요했을 것이다.</p>\n<h3>Wildcard와 다이아몬드 지시자</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> arrayList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashTable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hashtable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 클래스들의 Java API 문서에는</p>\n<p>Class ArrayList&#x3C;<b>E</b>><br>\nClass Hashtable&#x3C;<b>K</b>, <b>V</b>></p>\n<p>와 같이 &#x3C;>(다이아몬드) 안에 특정 타입이 아닌 E, K, V 등의 알파벳으로 설명되어있다. 이것을 <em>와일드카드 문자</em>라고 한다.</p>\n<p>제네릭은 클래스 내부에서 사용할 클래스를 외부에서 정해주는 것이라고 했는데, 뭐가 들어올진 몰라도 일단 구현은 해야하니 와일드카드 문자로 대체해서 써놓는 것.</p>\n<p>보통 클래스의 성격에 따라 앞글자를 따서 와일드카드 문자를 사용한다<br>\n<b>E</b> - ‘E’lement<br>\n<b>K</b> - ‘K’ey<br>\n<b>V</b> - ‘V’alue<br>\n<b>T</b> - ‘T’ype<br>\n<b>N</b> - ‘N’umber<br>\n<b>?</b> - ?는 모든 클래스를 의미한다. 단, 클래스 선언부에는 사용할 수 없고, 뒤에 언급할 <b>확장 문법</b>에서만 사용할 수 있다.</p>\n<h4>주의사항</h4>\n<ol>\n<li>\n<p>와일드카드 중복 사용은 불가<br>\npublic class ValueMapper&#x3C;T, T> 같이  와일드 카드를 중복해서 사용하는 것은 JVM이 매개변수 T를 구분하지 못하기 때문에 불가능.<br>\npublic class ValueMapper&#x3C;K, V> 같이 사용해야함.</p>\n</li>\n<li>\n<p>클래스 선언부에서 사용한 문자만 클래스 내부에서 사용 가능</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValueMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ValueMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ValueMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> sMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ValueMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ValueMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> iMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ValueMapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsMapper<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\niMapper<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>선언할 때는 와일드카드 문자로 선언해놓고, 클래스 인스턴스 시 사용할 클래스를 지정</p>\n<h3>제네릭 확장 문법</h3>\n<p>외부에서 사용할 클래스를 지정한다고 해도 지나친 자유를 주면 예외처리에 혼란을 줄 수 있다. 이를 방지하기 위해 사용될 클래스 범위를 제한할 수 있는 <em>extends</em> 기능이 존재한다.</p>\n<p>(*extends 외에 super 개념으로도 확장가능)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token number\">1.</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCase</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token number\">2.</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBox</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token number\">3.</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> collection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>제네릭에서 사용되는 extends는 상속의 extends와 인터페이스의 implements를 모두 포함한다.</p>\n<p>1번 구문의 경우 java.lang.Number 를 상속받는 클래스만 제네릭으로 사용가능하다.</p>\n<p>2번 구문은 Comparable 인터페이스가 구현된 클래스만 제네릭으로 사용가능하다.</p>\n<p>3번 구문은 &#x3C;? extends <b>T</b>>와 같이 제한할 타입 또한 와일드카드 문자를 사용할 수 있다는 것을 보여주는 에제이다. 말하자면 T가 뭔지는 모르겠지만 T 를 상속받는 클래스를 사용하겠다는 뜻.</p>\n<h2>Threading</h2>\n<p>TBW</p>","frontmatter":{"title":"Java Study (2)","date":"July 24, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/java-study-2/","previous":{"fields":{"slug":"/java-study-1/"},"frontmatter":{"title":"Java Study (1)"}},"next":null}}}