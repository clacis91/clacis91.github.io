{"expireTime":9007200821216466000,"key":"transformer-remark-markdown-ast-09e05c00e23c339312fb2ab043ca3b46-gatsby-remark-prismjsgatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Reference Book : ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":18,"offset":18},"indent":[]}},{"type":"link","title":null,"url":"https://www.youngjin.com/book/book_detail.asp?prod_cd=9788931436914&seq=4628&cate_cd=1&child_cate_cd=&goPage=11&orderByCd=3","children":[{"type":"text","value":"Java 언어로 배우는 디자인 패턴 입문","position":{"start":{"line":2,"column":19,"offset":19},"end":{"line":2,"column":41,"offset":41},"indent":[]}}],"position":{"start":{"line":2,"column":18,"offset":18},"end":{"line":2,"column":167,"offset":167},"indent":[]}},{"type":"text","value":", Yuki Hiroshi, 영진닷컴","position":{"start":{"line":2,"column":167,"offset":167},"end":{"line":2,"column":187,"offset":187},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":187,"offset":187},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":4,"column":1,"offset":189},"end":{"line":4,"column":4,"offset":192},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Composite 패턴","position":{"start":{"line":6,"column":5,"offset":198},"end":{"line":6,"column":17,"offset":210},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":194},"end":{"line":6,"column":17,"offset":210},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"디렉토리와 파일을 동일시하여 재귀적인 구조를 만들기 위한 패턴","position":{"start":{"line":8,"column":3,"offset":214},"end":{"line":8,"column":37,"offset":248},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":214},"end":{"line":8,"column":37,"offset":248},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":212},"end":{"line":8,"column":37,"offset":248},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"객체들의 관계를 트리 구조로 구성하여 부분-전체 계층을 표현하는 패턴으로, ","position":{"start":{"line":10,"column":1,"offset":250},"end":{"line":10,"column":43,"offset":292},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"단일 객체","position":{"start":{"line":10,"column":44,"offset":293},"end":{"line":10,"column":49,"offset":298},"indent":[]}}],"position":{"start":{"line":10,"column":43,"offset":292},"end":{"line":10,"column":50,"offset":299},"indent":[]}},{"type":"text","value":"와 ","position":{"start":{"line":10,"column":50,"offset":299},"end":{"line":10,"column":52,"offset":301},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"복합 객체(Composite)","position":{"start":{"line":10,"column":53,"offset":302},"end":{"line":10,"column":69,"offset":318},"indent":[]}}],"position":{"start":{"line":10,"column":52,"offset":301},"end":{"line":10,"column":70,"offset":319},"indent":[]}},{"type":"text","value":"를 동일하게 다룰 수 있다.","position":{"start":{"line":10,"column":70,"offset":319},"end":{"line":10,"column":85,"offset":334},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":250},"end":{"line":10,"column":85,"offset":334},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"예제 프로그램","position":{"start":{"line":12,"column":6,"offset":341},"end":{"line":12,"column":13,"offset":348},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":336},"end":{"line":12,"column":13,"offset":348},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"보통 ","position":{"start":{"line":14,"column":3,"offset":352},"end":{"line":14,"column":6,"offset":355},"indent":[]}},{"type":"html","value":"<b>","position":{"start":{"line":14,"column":6,"offset":355},"end":{"line":14,"column":9,"offset":358},"indent":[]}},{"type":"text","value":"트리 구조","position":{"start":{"line":14,"column":9,"offset":358},"end":{"line":14,"column":14,"offset":363},"indent":[]}},{"type":"html","value":"</b>","position":{"start":{"line":14,"column":14,"offset":363},"end":{"line":14,"column":18,"offset":367},"indent":[]}},{"type":"text","value":"로 되어 있는 파일 시스템을 다룰 땐 composite 패턴으로 구현되어 있다고 생각하면 된다.","position":{"start":{"line":14,"column":18,"offset":367},"end":{"line":14,"column":71,"offset":420},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":352},"end":{"line":14,"column":71,"offset":420},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":350},"end":{"line":14,"column":71,"offset":420},"indent":[]}},{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"파일 시스템에서 구조상으로는 디렉토리나 파일이나 타입에 따라 특별하게 취급되는 것이 아니라 ","position":{"start":{"line":15,"column":3,"offset":423},"end":{"line":15,"column":54,"offset":474},"indent":[]}},{"type":"html","value":"<b>","position":{"start":{"line":15,"column":54,"offset":474},"end":{"line":15,"column":57,"offset":477},"indent":[]}},{"type":"text","value":"동일시","position":{"start":{"line":15,"column":57,"offset":477},"end":{"line":15,"column":60,"offset":480},"indent":[]}},{"type":"html","value":"</b>","position":{"start":{"line":15,"column":60,"offset":480},"end":{"line":15,"column":64,"offset":484},"indent":[]}},{"type":"text","value":"하게 취급된다.","position":{"start":{"line":15,"column":64,"offset":484},"end":{"line":15,"column":72,"offset":492},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":423},"end":{"line":15,"column":72,"offset":492},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":421},"end":{"line":15,"column":72,"offset":492},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":350},"end":{"line":15,"column":72,"offset":492},"indent":[1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Entry</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> entry<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">FileTreatmentException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileTreatmentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" (\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>    \n<span class=\"token punctuation\">}</span> </code></pre></div>","position":{"start":{"line":17,"column":1,"offset":494},"end":{"line":32,"column":4,"offset":932},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Iterator</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Directory</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Entry</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span> dir <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Directory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span> it <span class=\"token operator\">=</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">)</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            size <span class=\"token operator\">+=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Entry</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> entry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dir<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Iterator</span> it <span class=\"token operator\">=</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span><span class=\"token punctuation\">)</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            entry<span class=\"token punctuation\">.</span><span class=\"token function\">printList</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":33,"column":1,"offset":933},"end":{"line":73,"column":4,"offset":1838},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">File</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Entry</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":74,"column":1,"offset":1839},"end":{"line":96,"column":4,"offset":2248},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Making root entries...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Directory</span> rootdir <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Directory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Directory</span> bindir <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Directory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Directory</span> tmpdir <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Directory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tmp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Directory</span> usrdir <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Directory</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"usr\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            rootdir<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>bindir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rootdir<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>tmpdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rootdir<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>usrdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            bindir<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vi\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bindir<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"latex\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            rootdir<span class=\"token punctuation\">.</span><span class=\"token function\">printList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>   <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileTreatmentException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":97,"column":1,"offset":2249},"end":{"line":120,"column":4,"offset":2940},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"연습문제","position":{"start":{"line":122,"column":6,"offset":2947},"end":{"line":122,"column":10,"offset":2951},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":2942},"end":{"line":122,"column":10,"offset":2951},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"모든 파일을 출력하는 메소드가 아닌, 특정 Entry의 fullpath를 출력하는 메소드를 만들자","position":{"start":{"line":124,"column":1,"offset":2953},"end":{"line":124,"column":55,"offset":3007},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":2953},"end":{"line":124,"column":55,"offset":3007},"indent":[]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Entry마다 parent 인스턴스를 만들어둬서, parent를 재귀적으로 타고 올라가며 StringBuffer를 구성하는 방식","position":{"start":{"line":126,"column":3,"offset":3011},"end":{"line":126,"column":74,"offset":3082},"indent":[]}}],"position":{"start":{"line":126,"column":3,"offset":3011},"end":{"line":126,"column":74,"offset":3082},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":3009},"end":{"line":126,"column":74,"offset":3082},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":3009},"end":{"line":126,"column":74,"offset":3082},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Entry.java</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFullpath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">StringBuffer</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>entry <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        entry <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":128,"column":1,"offset":3084},"end":{"line":143,"column":4,"offset":3351},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Directory.java</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Entry</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> entry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    entry<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    dir<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":145,"column":1,"offset":3353},"end":{"line":156,"column":4,"offset":3488},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Decorator 패턴","position":{"start":{"line":158,"column":5,"offset":3494},"end":{"line":158,"column":17,"offset":3506},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":3490},"end":{"line":158,"column":17,"offset":3506},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"오브젝트에 필요한 기능을 하나씩 장식처럼 추가해가는 패턴","position":{"start":{"line":160,"column":3,"offset":3510},"end":{"line":160,"column":34,"offset":3541},"indent":[]}}],"position":{"start":{"line":160,"column":3,"offset":3510},"end":{"line":160,"column":34,"offset":3541},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":3508},"end":{"line":160,"column":34,"offset":3541},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"예시: java.io에 있는 InputStream, Reader, OutputStream, Writer","position":{"start":{"line":162,"column":1,"offset":3543},"end":{"line":162,"column":58,"offset":3600},"indent":[]}},{"type":"break","position":{"start":{"line":162,"column":58,"offset":3600},"end":{"line":163,"column":1,"offset":3603},"indent":[1]}},{"type":"text","value":"이것들은 Reader를 예로 들면 FileReader, BufferedReader, InputStreamReader등 용도에 따라 Reader에 기능을 추가하여 구현된 클래스들이다.","position":{"start":{"line":163,"column":1,"offset":3603},"end":{"line":163,"column":102,"offset":3704},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":3543},"end":{"line":163,"column":102,"offset":3704},"indent":[1]}},{"type":"list","ordered":false,"start":null,"loose":false,"children":[{"type":"listItem","loose":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"중요한건 Decorator 패턴도 Composite 패턴처럼 내용물에 상관없이 ","position":{"start":{"line":165,"column":3,"offset":3708},"end":{"line":165,"column":47,"offset":3752},"indent":[]}},{"type":"html","value":"<b>","position":{"start":{"line":165,"column":47,"offset":3752},"end":{"line":165,"column":50,"offset":3755},"indent":[]}},{"type":"text","value":"재귀적","position":{"start":{"line":165,"column":50,"offset":3755},"end":{"line":165,"column":53,"offset":3758},"indent":[]}},{"type":"html","value":"</b>","position":{"start":{"line":165,"column":53,"offset":3758},"end":{"line":165,"column":57,"offset":3762},"indent":[]}},{"type":"text","value":"으로 구현돼야 한다는 것이다. 포장 안에 또다른 포장이 있는지, 내용물이 있는지에 관계없이 동일한 동작으로 구현되는 것이 중요하다.","position":{"start":{"line":165,"column":57,"offset":3762},"end":{"line":165,"column":130,"offset":3835},"indent":[]}}],"position":{"start":{"line":165,"column":3,"offset":3708},"end":{"line":165,"column":130,"offset":3835},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":3706},"end":{"line":165,"column":130,"offset":3835},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":3706},"end":{"line":165,"column":130,"offset":3835},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"예제 프로그램","position":{"start":{"line":167,"column":6,"offset":3842},"end":{"line":167,"column":13,"offset":3849},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":3837},"end":{"line":167,"column":13,"offset":3849},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"‘Hello World’","position":{"start":{"line":169,"column":2,"offset":3852},"end":{"line":169,"column":15,"offset":3865},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":3851},"end":{"line":169,"column":16,"offset":3866},"indent":[]}},{"type":"text","value":"를 꾸며주는 장식을 하나씩 추가하는 방식으로 구현하는 프로그램","position":{"start":{"line":169,"column":16,"offset":3866},"end":{"line":169,"column":50,"offset":3900},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":3851},"end":{"line":169,"column":50,"offset":3900},"indent":[]}},{"type":"table","align":["center","left"],"children":[{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Name","position":{"start":{"line":171,"column":2,"offset":3903},"end":{"line":171,"column":6,"offset":3907},"indent":[]}}],"position":{"start":{"line":171,"column":2,"offset":3903},"end":{"line":171,"column":6,"offset":3907},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"Description","position":{"start":{"line":171,"column":7,"offset":3908},"end":{"line":171,"column":18,"offset":3919},"indent":[]}}],"position":{"start":{"line":171,"column":7,"offset":3908},"end":{"line":171,"column":18,"offset":3919},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":3902},"end":{"line":171,"column":19,"offset":3920},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Display","position":{"start":{"line":173,"column":2,"offset":3941},"end":{"line":173,"column":9,"offset":3948},"indent":[]}}],"position":{"start":{"line":173,"column":2,"offset":3941},"end":{"line":173,"column":9,"offset":3948},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"문자열 표시용의 추상 클래스","position":{"start":{"line":173,"column":10,"offset":3949},"end":{"line":173,"column":25,"offset":3964},"indent":[]}}],"position":{"start":{"line":173,"column":10,"offset":3949},"end":{"line":173,"column":25,"offset":3964},"indent":[]}}],"position":{"start":{"line":173,"column":1,"offset":3940},"end":{"line":173,"column":26,"offset":3965},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"StringDisplay","position":{"start":{"line":174,"column":2,"offset":3967},"end":{"line":174,"column":15,"offset":3980},"indent":[]}}],"position":{"start":{"line":174,"column":2,"offset":3967},"end":{"line":174,"column":15,"offset":3980},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"1행으로 구성된 문자열 표시용 클래스","position":{"start":{"line":174,"column":16,"offset":3981},"end":{"line":174,"column":36,"offset":4001},"indent":[]}}],"position":{"start":{"line":174,"column":16,"offset":3981},"end":{"line":174,"column":36,"offset":4001},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":3966},"end":{"line":174,"column":37,"offset":4002},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"Border","position":{"start":{"line":175,"column":2,"offset":4004},"end":{"line":175,"column":8,"offset":4010},"indent":[]}}],"position":{"start":{"line":175,"column":2,"offset":4004},"end":{"line":175,"column":8,"offset":4010},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"‘장식’을 나타내는 클래스","position":{"start":{"line":175,"column":9,"offset":4011},"end":{"line":175,"column":23,"offset":4025},"indent":[]}}],"position":{"start":{"line":175,"column":9,"offset":4011},"end":{"line":175,"column":23,"offset":4025},"indent":[]}}],"position":{"start":{"line":175,"column":1,"offset":4003},"end":{"line":175,"column":24,"offset":4026},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"SideBorder","position":{"start":{"line":176,"column":2,"offset":4028},"end":{"line":176,"column":12,"offset":4038},"indent":[]}}],"position":{"start":{"line":176,"column":2,"offset":4028},"end":{"line":176,"column":12,"offset":4038},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"좌우에 장식을 붙이는 클래스","position":{"start":{"line":176,"column":13,"offset":4039},"end":{"line":176,"column":28,"offset":4054},"indent":[]}}],"position":{"start":{"line":176,"column":13,"offset":4039},"end":{"line":176,"column":28,"offset":4054},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":4027},"end":{"line":176,"column":29,"offset":4055},"indent":[]}},{"type":"tableRow","children":[{"type":"tableCell","children":[{"type":"text","value":"FullBorder","position":{"start":{"line":177,"column":2,"offset":4057},"end":{"line":177,"column":12,"offset":4067},"indent":[]}}],"position":{"start":{"line":177,"column":2,"offset":4057},"end":{"line":177,"column":12,"offset":4067},"indent":[]}},{"type":"tableCell","children":[{"type":"text","value":"상하좌우에 장식을 붙이는 클래스","position":{"start":{"line":177,"column":13,"offset":4068},"end":{"line":177,"column":30,"offset":4085},"indent":[]}}],"position":{"start":{"line":177,"column":13,"offset":4068},"end":{"line":177,"column":30,"offset":4085},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":4056},"end":{"line":177,"column":31,"offset":4086},"indent":[]}}],"position":{"start":{"line":171,"column":1,"offset":3902},"end":{"line":177,"column":31,"offset":4086},"indent":[1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Display</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRowText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRowText</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":179,"column":1,"offset":4088},"end":{"line":191,"column":4,"offset":4394},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringDisplay</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Display</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> str<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">StringDisplay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>str <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRowText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":193,"column":1,"offset":4396},"end":{"line":214,"column":4,"offset":4825},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Border</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Display</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Display</span> display<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Border</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Display</span> display<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>display <span class=\"token operator\">=</span> display<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":216,"column":1,"offset":4827},"end":{"line":223,"column":4,"offset":4996},"indent":[1,1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SideBorder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Border</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span> borderChar<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SideBorder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Display</span> display<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>display<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>borderChar <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRowText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> borderChar <span class=\"token operator\">+</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">getRowText</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> borderChar<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":225,"column":1,"offset":4998},"end":{"line":245,"column":4,"offset":5450},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FullBorder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Border</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FullBorder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Display</span> display<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>display<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRowText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> row <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>display<span class=\"token punctuation\">.</span><span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"+\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">makeLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"|\"</span> <span class=\"token operator\">+</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">getRowText</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"|\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">makeLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cnt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuffer</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cnt<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":247,"column":1,"offset":5452},"end":{"line":278,"column":4,"offset":6201},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Display를 상속하는 Border의 구현체 안에서 다시 display 인스턴스를 통해 method를 호출하는 ","position":{"start":{"line":280,"column":1,"offset":6203},"end":{"line":280,"column":64,"offset":6266},"indent":[]}},{"type":"html","value":"<U>","position":{"start":{"line":280,"column":64,"offset":6266},"end":{"line":280,"column":67,"offset":6269},"indent":[]}},{"type":"text","value":"재귀적인 구조","position":{"start":{"line":280,"column":67,"offset":6269},"end":{"line":280,"column":74,"offset":6276},"indent":[]}},{"type":"html","value":"</U>","position":{"start":{"line":280,"column":74,"offset":6276},"end":{"line":280,"column":78,"offset":6280},"indent":[]}},{"type":"text","value":"가 중요하다.","position":{"start":{"line":280,"column":78,"offset":6280},"end":{"line":280,"column":85,"offset":6287},"indent":[]}}],"position":{"start":{"line":280,"column":1,"offset":6203},"end":{"line":280,"column":85,"offset":6287},"indent":[]}},{"type":"heading","depth":4,"children":[{"type":"text","value":"연습문제","position":{"start":{"line":282,"column":6,"offset":6294},"end":{"line":282,"column":10,"offset":6298},"indent":[]}}],"position":{"start":{"line":282,"column":1,"offset":6289},"end":{"line":282,"column":10,"offset":6298},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Q1. 문자열의 ","position":{"start":{"line":284,"column":1,"offset":6300},"end":{"line":284,"column":10,"offset":6309},"indent":[]}},{"type":"html","value":"<U>","position":{"start":{"line":284,"column":10,"offset":6309},"end":{"line":284,"column":13,"offset":6312},"indent":[]}},{"type":"text","value":"상하에만","position":{"start":{"line":284,"column":13,"offset":6312},"end":{"line":284,"column":17,"offset":6316},"indent":[]}},{"type":"html","value":"</U>","position":{"start":{"line":284,"column":17,"offset":6316},"end":{"line":284,"column":21,"offset":6320},"indent":[]}},{"type":"text","value":" 선 장식을 붙여주는 클래스를 만들어보자","position":{"start":{"line":284,"column":21,"offset":6320},"end":{"line":284,"column":43,"offset":6342},"indent":[]}}],"position":{"start":{"line":284,"column":1,"offset":6300},"end":{"line":284,"column":43,"offset":6342},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UpDownBorder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Border</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UpDownBorder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Display</span> display<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>display<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRowText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> row <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>display<span class=\"token punctuation\">.</span><span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">makeLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">,</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">getRowText</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":286,"column":1,"offset":6344},"end":{"line":307,"column":4,"offset":6799},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Q2. 한줄만 출력하는 StringDisplay가 아닌 ","position":{"start":{"line":309,"column":1,"offset":6801},"end":{"line":309,"column":32,"offset":6832},"indent":[]}},{"type":"html","value":"<U>","position":{"start":{"line":309,"column":32,"offset":6832},"end":{"line":309,"column":35,"offset":6835},"indent":[]}},{"type":"text","value":"여러줄을 출력하는 MultiStringDisplay 클래스","position":{"start":{"line":309,"column":35,"offset":6835},"end":{"line":309,"column":67,"offset":6867},"indent":[]}},{"type":"html","value":"</U>","position":{"start":{"line":309,"column":67,"offset":6867},"end":{"line":309,"column":71,"offset":6871},"indent":[]}},{"type":"text","value":"를 만들어보자","position":{"start":{"line":309,"column":71,"offset":6871},"end":{"line":309,"column":78,"offset":6878},"indent":[]}}],"position":{"start":{"line":309,"column":1,"offset":6801},"end":{"line":309,"column":78,"offset":6878},"indent":[]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MultiStringDisplay</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Display</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strLine<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MultiStringDisplay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        strLine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        strLine<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> longest <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> line <span class=\"token operator\">:</span> strLine<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            longest <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>longest<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> longest<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> strLine<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRowText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">&lt;</span> strLine<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> strLine<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":311,"column":1,"offset":6880},"end":{"line":346,"column":4,"offset":7604},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"html","lang":"java","value":"<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SideBorder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Border</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getRowText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> row<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> borderChar \n            <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%-\"</span> <span class=\"token operator\">+</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">getColumns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"s\"</span><span class=\"token punctuation\">,</span> display<span class=\"token punctuation\">.</span><span class=\"token function\">getRowText</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n            <span class=\"token operator\">+</span> borderChar<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":348,"column":1,"offset":7606},"end":{"line":360,"column":4,"offset":7866},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":360,"column":4,"offset":7866}}}}